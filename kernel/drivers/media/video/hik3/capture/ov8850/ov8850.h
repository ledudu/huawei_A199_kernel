/*
 *  OV8850 camera driver head file
 *
 *  CopyRight (C) Hisilicon Co., Ltd.
 *	Author :
 *  Version:  1.2
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifndef _OV8850_H
#define _OV8850_H

#include "../isp/k3_isp_io.h"

#define OV8850REG_SOFTWARE_RESET	0x0103

/* High 4 bits are clock, low 4 bits are reset */
#define OV8850REG_CLKRST0		0x3016
#define OV8850REG_CLKRST1		0x3017
#define OV8850REG_CLKRST2		0x3018

#define OV8850REG_PLL1_MULTIPLIER	0x30b3
#define OV8850REG_PLL1_PREDIV		0x30b4
#define OV8850REG_PLL1_OP_PIX_DIV	0x30b5
#define OV8850REG_PLL1_OS_SYS_DIV	0x30b6

#define OV8850REG_PLL2_PREDIV		0x3090
#define OV8850REG_PLL2_MULTIPLIER	0x3091
#define OV8850REG_PLL2_DIVS			0x3092
#define OV8850REG_PLL2_SELD5		0x3093

#define OV8850REG_PLL3_PREDIV		0x3098
#define OV8850REG_PLL3_MULT1		0x309c
#define OV8850REG_PLL3_MULT2		0x3099
#define OV8850REG_PLL3_DIVS		0x309a
#define OV8850REG_PLL3_DIV		0x309b

#define OV8850REG_WIDTH			0x3808
#define OV8850REG_HEIGHT		0x380a

//#define OV8850REG_HTS			0x380c
//#define OV8850REG_VTS			0x380e

#define OV8850REG_X_ADDR_START		0x3800
#define OV8850REG_Y_ADDR_START		0x3802
#define OV8850REG_X_ADDR_END		0x3804
#define OV8850REG_Y_ADDR_END		0x3806

#define OV8850REG_H_OFFSET		0x3810
#define OV8850REG_V_OFFSET		0x3812

/*
 * bit[7:4]: odd inc
 * bit[3:0]: even inc
 */
#define OV8850REG_X_INC			0x3814
#define OV8850REG_Y_INC			0x3815

/*
 * bit[6]: digital vertical flip
 * bit[1]: array vertical flip
 * bit[0]: vertical binning
 */
#define OV8850REG_TIMING_FORMAT1	0x3820

/*
 * bit[2:1]: 00-normal;11-horizontal mirror
 * bit[0]: horizontal binning
 */
#define OV8850REG_TIMING_FORMAT2	0x3821


/* exposure: three bytes */
#define OV8850REG_LONG_EXPOSURE	0x3500

/*
 * bit[5]: Gain delay option: 0-one frame latch; 1-delay one frame latch
 * bit[4]: choose delay option: 0-delay disable; 1-delay enable
 * bit[1]: AGC manual enable
 * bit[0]: AEC manual enable
 */
#define OV8850REG_AEC_MANUAL		0x3503

/* exposure: three bytes */
#define OV8850REG_SHORT_EXPOSURE	0x3506

#define OV8850REG_GAIN_CONVERT		0x3509

#define OV8850REG_AEC_GAIN		0x350a

/*
 * bit[7:4]: lane num
 * bit[0]: 1-mipi;0-dvp
 */
#define OV8850REG_MIPI_SC_CTRL0		0x3011

/*
 * bit[7:4]: disable each lane
 * bit[3]: phy mode; 1-mipi;0-dvp
 */
#define OV8850REG_MIPI_SC_CTRL2		0x3015

#define OV8850REG_GENERAL_COLORBAR	0x5e00
#define OV8850REG_GROUP_ACCESS	0x3208
#define OV8850_EXPOSURE_REG_0		0x3500	//AEC_LONG_EXPO
#define OV8850_EXPOSURE_REG_1		0x3501
#define OV8850_EXPOSURE_REG_2		0x3502
#define OV8850_GAIN_REG_H			0x350a	//AEC_AGC_ADJ  gain[10:8]
#define OV8850_GAIN_REG_L			0x350b	//AEC_AGC_ADJ gain[7:0]

#define OV8850_HTS_REG_H			0x380c	//TIMING_HTS high
#define OV8850_HTS_REG_L			0x380d	//TIMING_HTS low
#define OV8850_VTS_REG_H			0x380e	//TIMING_VTS high
#define OV8850_VTS_REG_L			0x380f	//TIMING_VTS low
#define MIPI_4LANE

#define ORIENTATION_PHONE

/* For Huawei OTP */
struct otp_struct {
	//module info
	u8 year;
	u8 month;
	u8 day;
	u8 user_id_1;
	u8 user_id_2;
	u8 user_id_3;
	u8 cam_code;
	u8 vendor_version;
	//awb
	u8 rg_h;
	u8 rg_l;
	u8 bg_h;
	u8 bg_l;
	u8 rg_coff;
	u8 bg_coff;
	//vcm
	u8 start_curr;
	u8 end_curr;
	//lenc
	u8 lenc[62];
};

/*delete flash type and use boardid to distinguish it*/
#define OTP_BUFFER_START_ADDRESS		0x3d00
#define RG_TYPICAL 0x400
#define BG_TYPICAL 0x400

/*OVISP register*/
#define REG_D65_LIMIT		0x6620d
#define REG_D65_SPLIT		0x6620f
#define REG_A_LIMIT			0x6620e
#define REG_A_SPLIT			0x66210
#define REG_CWF_X			0x66209
#define REG_CWF_Y			0x6620a
#define REG_CENTER_CT		0x1c1c8
#define REG_LEFT_CT			0x1c1cc
#define REG_RIGHT_CT		0x1c1d0
#define REG_K_Y2X			0x6620b
#define REG_K_X2Y			0x6620c
#define REG_CT_A			0x1ccd5
#define REG_CT_CWF			0x1ccd6
#define REG_CT_D			0x1ccd7
#define REG_CT_HIGH_LIGHT_1		0x1c5d4
#define REG_CT_HIGH_LIGHT_2		0x1c5d5
#define REG_CT_HIGH_LIGHT_D50_B	0x1c5d6
#define REG_CT_HIGH_LIGHT_D50_R	0x1c5d7

int ov8850_check_otp_group(u16 index);
void ov8850_read_otp_mi_wb_vcm(u16 index, struct otp_struct *potp);
void ov8850_update_otp_wb(u16 otp_index);
void ov8850_update_otp_lenc(u16 otp_index);
void ov8850_update_blc(void);


/***********************************************************************
 *
 * ov8850 init sensor registers list
 *
 ***********************************************************************/
/*delete no-use sensor setting*/

/*add and modify some registers*/
/*the new setting is supplied by shanghai OV FAE zhanghouxin 0206*/
const struct _sensor_reg_t ov8850_init_regs_new[] = {
	//100 99 1632 1224
	//100 98 1 0
	//102 81 0
	{0x0103, 0x01},
	{0x0102, 0x01},
	{0x3002, 0x08},
	{0x3004, 0x00},
	{0x3005, 0x00},
	{0x3011, 0x41},
	{0x3012, 0x08},
	{0x3014, 0x4a},
	{0x3015, 0x0a},
	{0x3021, 0x00},
	{0x3022, 0x02},
	{0x3081, 0x02},
	{0x3083, 0x01},
	{0x3092, 0x00},
	{0x3093, 0x00},
	{0x309a, 0x00},
	{0x309b, 0x00},
	{0x309c, 0x00},
	{0x30b3, 0x64},
	{0x30b4, 0x03},
	{0x30b5, 0x04},
	{0x30b6, 0x01},
	{0x3104, 0xa1},
	{0x3106, 0x01},
	{0x3503, 0x27},//ae unstable 0x07->0x27
	{0x350a, 0x00},
	{0x350b, 0x38},
	{0x3602, 0x70},
	{0x3620, 0x64},
	{0x3622, 0x0f},
	{0x3623, 0x68},
	{0x3625, 0x40},
	{0x3631, 0x83},
	{0x3633, 0x34},
	{0x3634, 0x03},
	{0x364c, 0x00},
	{0x364d, 0x00},
	{0x364e, 0x00},
	{0x364f, 0x00},
	{0x3660, 0x80},
	{0x3662, 0x10},
	{0x3665, 0x00},
	{0x3666, 0x00},
	{0x366f, 0x20},
	{0x3703, 0x2e},
	{0x3732, 0x05},
	{0x373a, 0x51},
	{0x373d, 0x22},
	{0x3754, 0xc0},
	{0x3756, 0x2a},
	{0x3759, 0x0f},
	{0x376b, 0x44},
	{0x3795, 0x00},
	{0x379c, 0x0c},
	{0x3810, 0x00},
	{0x3811, 0x04},
	{0x3812, 0x00},
	{0x3813, 0x04},
	{0x3826, 0x00},
	{0x4000, 0x18},
	{0x4002, 0xc5},
	{0x4005, 0x18},
	{0x4006, 0x20},
	{0x4008, 0x20},
	{0x4009, 0x10},
	{0x404f, 0xA0},
	{0x4100, 0x1d},
	{0x4101, 0x23},
	{0x4102, 0x44},
	{0x4104, 0x5c},
	{0x4109, 0x03},
	{0x4300, 0xff},
	{0x4301, 0x00},
	{0x4315, 0x00},
	{0x4512, 0x00},
	{0x4837, 0x08},
	{0x4a00, 0xaa},
	{0x4a03, 0x01},
	{0x4a05, 0x08},
	{0x4d00, 0x04},
	{0x4d01, 0x52},
	{0x4d02, 0xfe},
	{0x4d03, 0x05},
	{0x4d04, 0xff},
	{0x4d05, 0xff},
	{0x5000, 0x06},
	{0x5001, 0x01},
	{0x5002, 0x80},
	{0x5041, 0x04},
	{0x5043, 0x48},
	{0x5e00, 0x00},
	{0x5e10, 0x1c},

	//1632x1224
	{0x3500, 0x00},
	{0x3501, 0x7c},
	{0x3502, 0x00},
	{0x3090, 0x02},
	{0x3091, 0x12},
	{0x3094, 0x00},
	{0x3098, 0x03},
	{0x3099, 0x18},
	{0x3624, 0x00},
	{0x3680, 0xe0},
	{0x3702, 0xf3},
	{0x3704, 0x71},
	{0x3708, 0xe6},
	{0x3709, 0xc3},
	{0x371f, 0x0c},
	{0x3739, 0x30},
	{0x373c, 0x20},
	{0x3781, 0x0c},
	{0x3786, 0x16},
	{0x3796, 0x64},
	{0x3a04, 0x07},
	{0x3a05, 0xc8},
	{0x4001, 0x02},
	{0x4004, 0x04},
	{0x4005, 0x18},
	{0x5013, 0x00},//add by shawn20130308
	{0x0100, 0x01},
};

const struct _sensor_reg_t ov8850_framesize_1600x1200_new[] = {
	//1600x1200
	{0x0100, 0x00},
	{0x3624, 0x00},
	{0x3680, 0xe0},
	{0x3702, 0xf3},
	{0x3704, 0x71},
	{0x3708, 0xe6},
	{0x3709, 0xc3},
	{0x371f, 0x0c},
	{0x3739, 0x30},
	{0x373c, 0x20},
	{0x3781, 0x0c},
	{0x3786, 0x16},
	{0x3796, 0x64},
	{0x3800, 0x00},
	{0x3801, 0x28},
	{0x3802, 0x00},
	{0x3803, 0x20},
	{0x3804, 0x0c},
	{0x3805, 0xb7},
	{0x3806, 0x09},
	{0x3807, 0x8f},
	{0x3808, 0x06},
	{0x3809, 0x40},
	{0x380a, 0x04},
	{0x380b, 0xb0},
	{0x380c, 0x0E},
	{0x380d, 0x18},
	{0x380e, 0x07},
	{0x380f, 0x38},
	{0x3810, 0x00},
	{0x3811, 0x04},
	{0x3812, 0x00},
	{0x3813, 0x04},
	{0x3814, 0x31},
	{0x3815, 0x31},
	/*here just change binning state when framesizes swtich,and mirror and flip changed in update-flip func*/
	{0x3820, 0x11, 0x42},
	{0x3821, 0x0f, 0x06},
	//bining sum
	{0x4512, 0x00},//binning mode:0-sum;1-average;
	{0x4101, 0x33},
	{0x3a04, 0x07},
	{0x3a05, 0xc8},
	{0x4001, 0x02},
	{0x4004, 0x04},
	{0x4005, 0x18},
	//pll for 20Mclk
	{0x3011, 0x41},
	{0x3015, 0x08},
	{0x3090, 0x02},
	{0x3091, 0x28},//0x28:200MHz;0x1e:150MHz//0x2a:210MHz is over
	{0x3092, 0x01},
	{0x3093, 0x01},
	{0x30b3, 0x78},
	{0x30b4, 0x03},
	{0x30b5, 0x04},
	{0x30b6, 0x01},
	{0x4837, 0x0a},
	{0x3098, 0x02},
	{0x3099, 0x18},
	{0x309a, 0x00},
	{0x309b, 0x00},
	{0x309c, 0x00},
	{0x4007, 0x90},
	{0x5045, 0x55},
	{0x5048, 0x0e},//0e --> isp blc:0x38;10 --> isp blc:0x40;
	{0x0100, 0x01},
};
const struct _sensor_reg_t ov8850_framesize_1920X1088[] = {
    //1080P
   {0x0100, 0x00},
   {0x3624, 0x00},
   {0x3680, 0xe0},
   {0x3702, 0xf3},
   {0x3704, 0x71},
   {0x3708, 0xe3},
   {0x3709, 0xc3},
   {0x371f, 0x0c},
   {0x3739, 0x30},
   {0x373c, 0x20},
   {0x3781, 0x0c},
   {0x3786, 0x16},
   {0x3796, 0x64},
   {0x3800, 0x00},
   {0x3801, 0x0c},
   {0x3802, 0x01},
   {0x3803, 0x38},
   {0x3804, 0x0c},
   {0x3805, 0xd3},
   {0x3806, 0x08},
   {0x3807, 0x73},
   {0x3808, 0x07},
   {0x3809, 0x80},
   {0x380a, 0x04},
   {0x380b, 0x40},
   {0x380c, 0x0e},
   {0x380d, 0x18},
   {0x380e, 0x07},
   {0x380f, 0xcc},
   {0x3810, 0x00},
   {0x3811, 0x04},
   {0x3812, 0x00},
   {0x3813, 0x04},
   {0x3814, 0x11},
   {0x3815, 0x11},
   //{0x3820, 0x10},
   //{0x3821, 0x0e},
   {0x3820, 0x10, 0x42},
   {0x3821, 0x0e, 0x06},
   {0x4512, 0x01},
   {0x3a04, 0x07},
   {0x3a05, 0xc8},
   {0x4001, 0x02},
   {0x4004, 0x08},
   {0x4005, 0x18},
   {0x3011, 0x41},
   {0x3015, 0x08},
   {0x3090, 0x02},
   {0x3091, 0x28},
   {0x3092, 0x01},
   {0x3093, 0x01},
   {0x30b3, 0x78},
   {0x30b4, 0x03},
   {0x30b5, 0x04},
   {0x30b6, 0x01},
   {0x4837, 0x0a},
   {0x3098, 0x02},
   {0x3099, 0x18},
   {0x309a, 0x00},
   {0x309b, 0x00},
   {0x309c, 0x00},
   {0x4007, 0x90},
   {0x5045, 0x55},
   {0x5048, 0x10},
   {0x0100, 0x01},
};

const struct _sensor_reg_t ov8850_framesize_3264x2448_new[] = {
	{0x0100, 0x00},
	{0x3624, 0x04},
	{0x3680, 0xb0},
	{0x3702, 0x6e},
	{0x3704, 0x55},
	{0x3708, 0xe4},
	{0x3709, 0xc3},
	{0x371f, 0x0d},
	{0x3739, 0x80},
	{0x373c, 0x24},
	{0x3781, 0xc8},
	{0x3786, 0x08},
	{0x3796, 0x43},
	{0x3800, 0x00},
	{0x3801, 0x0c},
	{0x3802, 0x00},
	{0x3803, 0x0c},
	{0x3804, 0x0c},
	{0x3805, 0xd3},
	{0x3806, 0x09},
	{0x3807, 0xa3},
	{0x3808, 0x0c},
	{0x3809, 0xc0},
	{0x380a, 0x09},
	{0x380b, 0x90},
	{0x380c, 0x0e},
	{0x380d, 0xcc},
	{0x380e, 0x0a},
	{0x380f, 0x4d},
	{0x3810, 0x00},
	{0x3811, 0x04},
	{0x3812, 0x00},
	{0x3813, 0x04},
	{0x3814, 0x11},
	{0x3815, 0x11},
	/*here just change binning state when framesizes swtich,and mirror and flip changed in update-flip func*/
	{0x3820, 0x10, 0x42},
	{0x3821, 0x0e, 0x06},
	{0x3a04, 0x09},
	{0x3a05, 0xcc},
	{0x4001, 0x06},
	{0x4004, 0x04},
	{0x4005, 0x1a},
	{0x4512, 0x01},
	{0x3011, 0x41},
	{0x3015, 0x08},
	{0x3090, 0x01},
	{0x3091, 0x0f},
	{0x3092, 0x01},
	{0x3093, 0x01},
	{0x30b3, 0x78},
	{0x30b4, 0x03},
	{0x30b5, 0x04},
	{0x30b6, 0x01},
	{0x4837, 0x0a},
	{0x3098, 0x02},
	{0x3099, 0x18},
	{0x309a, 0x00},
	{0x309b, 0x00},
	{0x309c, 0x00},
	{0x4007, 0x90},
	{0x5045, 0x55},
	{0x5048, 0x10},
	{0x0100, 0x01},
};

/*move the isp setting to here*/
const struct isp_reg_t isp_init_regs_ov8850_foxconn[] = {
	/* BLC */
	{0x1e984, 0x3c},//preview blc in low gain
	{0x1e985, 0x3c},//preview blc in high gain
	{0x1c58b, 0x40}, //capture blc 8M 
	{0x1c58c, 0x3c}, //capture blc 2M 

	/* AEC */
	{0x1c146, 0x30},//ori0x30 low AE target,should close
	{0x1c14a, 0x03},
	{0x1c14b, 0x0a},
	{0x1c14c, 0x0a},//aec fast step//
	{0x1c14e, 0x08},//slow step//08
	{0x1c140, 0x01},//banding
	{0x1c13e, 0x02},//real gain mode for ov8850

	{0x66401, 0x00},//window weight
	{0x66402, 0x20},//StatWin_Left
	{0x66403, 0x00},
	{0x66404, 0x20},//StatWin_Top
	{0x66405, 0x00},
	{0x66406, 0x20},//StatWin_Right
	{0x66407, 0x00},
	{0x66408, 0x28},//StatWin_Bottom
	{0x66409, 0x00},//definiton ofthe center 3x3 window
	{0x6640a, 0xc8},//nWin_Left
	{0x6640d, 0x00},
	{0x6640e, 0x96},//nWin_Top
	{0x66411, 0x04},
	{0x66412, 0xb0},//nWin_Width
	{0x66415, 0x03},
	{0x66416, 0x84},//nWin_Height
	{0x6642e, 0x01},//nWin_Weight_0 weight pass
	{0x6642f, 0x01},//nWin_Weight_1
	{0x66430, 0x01},//nWin_Weight_2
	{0x66431, 0x01},//nWin_Weight_3
	{0x66432, 0x02},//nWin_Weight_4
	{0x66433, 0x02},//nWin_Weight_5
	{0x66434, 0x02},//nWin_Weight_6
	{0x66435, 0x02},//nWin_Weight_7
	{0x66436, 0x04},//nWin_Weight_8
	{0x66437, 0x02},//nWin_Weight_9
	{0x66438, 0x02},//nWin_Weight_10
	{0x66439, 0x02},//nWin_Weight_11
	{0x6643a, 0x02},//nWin_Weight_12
	{0x6644e, 0x03},//nWin_Weight_Shift
	{0x6644f, 0x04},//black level
	{0x66450, 0xf8},//saturate level
	{0x6645b, 0x1a},//black weight1
	{0x6645d, 0x1a},//black weight2
	{0x66460, 0x04},//saturate per1
	{0x66464, 0x0a},//saturate per2
	{0x66467, 0x14},//saturate weight1
	{0x66469, 0x14},//saturate weight2
	//auto AE control

	/* Raw Stretch */
	{0x65020, 0x01},//RAW Stretch Target
	{0x66500, 0x28},
	{0x66501, 0x00},
	{0x66502, 0xff},
	{0x66503, 0x0f},
	{0x1c1b0, 0xff},
	{0x1c1b1, 0xff},
	{0x1c1b2, 0x01},
	{0x65905, 0x08},
	{0x66301, 0x02},//high level step
	{0x66302, 0xd0},//ref bin
	{0x66303, 0x0a},//PsPer0
	{0x66304, 0x10},//PsPer1
	{0x1c5a4, 0x01},//use new high stretch
	{0x1c5a5, 0x20},//stretch low step
	{0x1c5a6, 0x20},//stretch high step
	{0x1c5a7, 0x08},//stretch slow range
	{0x1c5a8, 0x02},//stretch slow step
	{0x1c1b8, 0x10},//ratio scale

	{0x1c5a0, 0x50},//AE target high
	{0x1c5a2, 0x04},//target stable range
	{0x1c5a3, 0x06},//stretch target slow range

	/* De-noise */
	{0x65604, 0x00},//Richard for new curve 0314
	{0x65605, 0x00},//Richard for new curve 0314
	{0x65606, 0x00},//Richard for new curve 0314
	{0x65607, 0x00},//Richard for new curve 0314

	{0x65510, 0x04},//G dns slope change from 0x4 to 0xf Richard 0320
	{0x65511, 0x08},

	//Raw G De-noise improve white pixel
	//as dynamic denoise used, so here all is zero
	{0x6551a, 0x06},//gain 1X

	{0x6551b, 0x08},//gain  2X
	{0x6551c, 0x0a},//gain  4X
	{0x6551d, 0x10},//gain  8X
	{0x6551e, 0x16},//gain 16X
	{0x6551f, 0x16},//gain 32X
	{0x65520, 0x16},//gain 64X
	/*RAW BR De-noise*/
	{0x65522, 0x00},
	{0x65523, 0x08},//gain 1X 
	{0x65524, 0x00},          
	{0x65525, 0x0a},//gain 2X 
	{0x65526, 0x00},          
	{0x65527, 0x10},//gain 4X 
	{0x65528, 0x00},          
	{0x65529, 0x20},//gain 8X 
	{0x6552a, 0x00},          
	{0x6552b, 0x20},//gain 16X
	{0x6552c, 0x00},          
	{0x6552d, 0x20},//gain 32X
	{0x6552e, 0x00},          
	{0x6552f, 0x20},//gain 64X
	/*UV De-noise*/
	{0x65c00, 0x03},//gain 1X
	{0x65c01, 0x05},//gain 2X  
	{0x65c02, 0x0a},//gain 4X  
	{0x65c03, 0x1f},//gain 8X  
	{0x65c04, 0x1f},//gain 16X 
	{0x65c05, 0x1f},//gain 32X 

	/* sharpeness */
	{0x65600, 0x00},
	{0x65601, 0x20},//0319
	{0x65602, 0x00},
	{0x65603, 0x60},//y00215412 change sharpness high gain threshod 0x40->0x60 20120814
	{0x65608, 0x06},
	{0x65609, 0x20},
	{0x6560c, 0x02},//high gain sharpness
	{0x6560d, 0x18},//low gain sharpness, will be override in driver
	{0x6560e, 0x10},//MinSharpenTp
	{0x6560f, 0x60},//MaxSharpenTp
	{0x65610, 0x10},//MinSharpenTm
	{0x65611, 0x60},//MaxSharpenTm
	{0x65613, 0x10},//SharpenAlpha, 20120809 y00215412
	{0x65615, 0x08},//HFreq_thre
	{0x65617, 0x06},//HFreq_coef

	/* auto uv saturation */
	{0x1c4e8, 0x01},//Enable
	{0x1c4e9, 0x30},
	{0x1c4ea, 0x70},
	{0x1c4eb, 0x80}, //keep back for new cmx 0310
	{0x1c4ec, 0x60}, //keep back for new cmx 0310

	/* Global Gamma */
	{0x1c49b, 0x01}, //gamma enable 
	{0x1c49c, 0x02},
	{0x1c49d, 0x01}, //gamma 2.0 0310
	{0x1c49e, 0x02},
	{0x1c49f, 0x01}, //gamma 2.0 0310
	{0x1c4a0, 0x00},
	{0x1c4a1, 0x18},
	{0x1c4a2, 0x00},
	{0x1c4a3, 0x88}, //gamma 2.0 0310 //avoid false contour Richard@0323

	/* Tone Mapping */
	//contrast curve change for skin over exposure 20120728//used for low gain   
	{0x1C4C0, 0x1d},//1d
	{0x1C4C1, 0x30},//2f
	{0x1C4C2, 0x3d},//3d
	{0x1C4C3, 0x48},//47
	{0x1C4C4, 0x54},//50
	{0x1C4C5, 0x60},//5a
	{0x1C4C6, 0x6a},//65
	{0x1C4C7, 0x75},//70
	{0x1C4C8, 0x82},//7e
	{0x1C4C9, 0x90},//8c
	{0x1C4CA, 0x9e},//9a
	{0x1C4CB, 0xaf},//a9
	{0x1C4CC, 0xbf},//ba
	{0x1C4CD, 0xd5},//cf
	{0x1C4CE, 0xea},//e5

	{0x1c4d4, 0x20},//EDR scale
	{0x1c4d5, 0x20},//EDR scale
	{0x1c4cf, 0x80},
	{0x65a00, 0x1b},
	{0x65a01, 0xc0}, //huiyan 0801

	//dark boost
	{0x1c4b0, 0x02},
	{0x1c4b1, 0x80},

	//curve gain control
	{0x1c1b3, 0x20}, //Gain thre1
	{0x1c1b4, 0x60}, //Gain thre2
	{0x1c1b5, 0x01}, //EDR gain control
	{0x1c1b6, 0x01}, //Curve Gain control
	{0x1c1b7, 0x40}, //after gamma cut ratio

	//Manual UV curve, will be disabled when dynamic UV curve is enabled  
	{0x1C998, 0x01},
	{0x1C999, 0x00},
	{0x1C99A, 0x01},
	{0x1C99B, 0x00},
	{0x1C99C, 0x01},
	{0x1C99D, 0x00},
	{0x1C99E, 0x01},
	{0x1C99F, 0x00},
	{0x1C9A0, 0x01},
	{0x1C9A1, 0x00},
	{0x1C9A2, 0x01},
	{0x1C9A3, 0x00},
	{0x1C9A4, 0x01},
	{0x1C9A5, 0x00},
	{0x1C9A6, 0x01},
	{0x1C9A7, 0x00},
	{0x1C9A8, 0x01},
	{0x1C9A9, 0x00},
	{0x1C9AA, 0x01},
	{0x1C9AB, 0x00},
	{0x1C9AC, 0x01},
	{0x1C9AD, 0x00},
	{0x1C9AE, 0x01},
	{0x1C9AF, 0x00},
	{0x1C9B0, 0x01},
	{0x1C9B1, 0x00},
	{0x1C9B2, 0x01},
	{0x1C9B3, 0x00},
	{0x1C9B4, 0x01},
	{0x1C9B5, 0x00},
	{0x1C9B6, 0x01},
	{0x1C9B7, 0x00},

	/* LENC */
	{0x1c247, 0x00},//one profile
	{0x1c24c, 0x00},
	{0x1c24d, 0x40},
	{0x1c24e, 0x00},
	{0x1c24f, 0x80},
	{0x1c248, 0x40},
	{0x1c24a, 0x20},
	{0x1c574, 0x00},
	{0x1c575, 0x20},
	{0x1c576, 0x00},
	{0x1c577, 0xf0},
	{0x1c578, 0x40},

	{0x65200, 0x0d},
	{0x65206, 0x3c},
	{0x65207, 0x04},
	{0x65208, 0x3c}, //new shading params revised 20120816
	{0x65209, 0x04},
	{0x6520a, 0x33},
	{0x6520b, 0x0c},
	{0x65214, 0x28},
	{0x65216, 0x20},
	{0x1d93d, 0x08}, //new shading params added 20120816
	{0x1d93e, 0x00},
	{0x1d93f, 0x40},
	{0x1d940, 0xfc},
	{0x1d942, 0x04},
	{0x1d941, 0xfc},
	{0x1d943, 0x04},

	{0x1d944, 0x00},
	{0x1d946, 0x00},
	{0x1d945, 0xfc},
	{0x1d947, 0x04},

	/* OVISP LENC setting for DAY light Long Exposure (HDR/3D) */
	//Y channel re-back to old version(do not plus 8) 20120821 by y00215412
	{0x1c264, 0x07},
	{0x1c265, 0x05},
	{0x1c266, 0x05},
	{0x1c267, 0x05},
	{0x1c268, 0x05},
	{0x1c269, 0x07},
	{0x1c26a, 0x04},
	{0x1c26b, 0x04},
	{0x1c26c, 0x03},
	{0x1c26d, 0x03},
	{0x1c26e, 0x04},
	{0x1c26f, 0x05},
	{0x1c270, 0x04},
	{0x1c271, 0x02},
	{0x1c272, 0x00},
	{0x1c273, 0x00},
	{0x1c274, 0x02},
	{0x1c275, 0x04},
	{0x1c276, 0x04},
	{0x1c277, 0x02},
	{0x1c278, 0x00},
	{0x1c279, 0x00},
	{0x1c27a, 0x02},
	{0x1c27b, 0x03},
	{0x1c27c, 0x04},
	{0x1c27d, 0x03},
	{0x1c27e, 0x03},
	{0x1c27f, 0x03},
	{0x1c280, 0x03},
	{0x1c281, 0x04},
	{0x1c282, 0x07},
	{0x1c283, 0x05},
	{0x1c284, 0x04},
	{0x1c285, 0x04},
	{0x1c286, 0x05},
	{0x1c287, 0x08},
	//Cb
	{0x1c288, 0x1f},
	{0x1c289, 0x20},
	{0x1c28a, 0x20},
	{0x1c28b, 0x20},
	{0x1c28c, 0x1d},
	{0x1c28d, 0x20},
	{0x1c28e, 0x1f},
	{0x1c28f, 0x1f},
	{0x1c290, 0x1e},
	{0x1c291, 0x20},
	{0x1c292, 0x1f},//center
	{0x1c293, 0x20},
	{0x1c294, 0x21},
	{0x1c295, 0x1f},
	{0x1c296, 0x1e},
	{0x1c297, 0x20},
	{0x1c298, 0x1f},
	{0x1c299, 0x20},
	{0x1c29a, 0x20},
	{0x1c29b, 0x20},
	{0x1c29c, 0x1f},
	{0x1c29d, 0x20},
	{0x1c29e, 0x1f},
	{0x1c29f, 0x20},
	{0x1c2a0, 0x1e},
	//Cr
	{0x1c2a1, 0x1f},//edge of left
	{0x1c2a2, 0x1f},
	{0x1c2a3, 0x21},
	{0x1c2a4, 0x1f},
	{0x1c2a5, 0x1f},
	{0x1c2a6, 0x1f},//nearside
	{0x1c2a7, 0x20},
	{0x1c2a8, 0x1e},
	{0x1c2a9, 0x20},
	{0x1c2aa, 0x1f},
	{0x1c2ab, 0x1f},//center
	{0x1c2ac, 0x1e},
	{0x1c2ad, 0x22},
	{0x1c2ae, 0x1e},
	{0x1c2af, 0x20},
	{0x1c2b0, 0x20},//starboard
	{0x1c2b1, 0x1f},
	{0x1c2b2, 0x1e},
	{0x1c2b3, 0x20},
	{0x1c2b4, 0x1f},
	{0x1c2b5, 0x1f},//edge of right
	{0x1c2b6, 0x1f},
	{0x1c2b7, 0x21},
	{0x1c2b8, 0x1f},
	{0x1c2b9, 0x1f},

	/* AWB */
	{0x66201, 0x52},
	{0x66203, 0x14},//crop window
	{0x66211, 0xe8},//awb top limit
	{0x66212, 0x04},//awb bottom limit

	//{0x1c17c, 0x01},//CT mode, should close
	{0x1c182, 0x04},
	{0x1c183, 0x00},//MinNum
	{0x1c184, 0x02},//AWB Step :awb adjust every 2 FPS 
	{0x1c58d, 0x00},//LimitAWBAtD65Enable

	{0x1c1aa, 0x00},//avgAllEnable
	{0x1c1ad, 0x02},//weight of A
	{0x1c1ae, 0x0c},//weight of D65
	{0x1c1af, 0x04},//weight of CWF

	{0x1c5ac, 0x80},//pre-bgain, apply on CCM
	{0x1c5ad, 0x80},//pre-ggain
	{0x1c5ae, 0x80},//pre-rgain

	{0x1ccce, 0x02},//awb shift mode.2 means enable;0 means diable.
	{0x1cccf, 0xf0},//B gain for A
	{0x1ccd0, 0x0c},//R gain for A
	{0x1c5b8, 0xfc},//B gain for C outdoor
	{0x1c5b9, 0x02},//R gain for C outdoor
	{0x1ccd1, 0xfc},//B gain for C indoor; C lightbox testing; outdoor grasslot
	{0x1ccd2, 0x08},//R gain for C indoor; C lightbox testing; outdoor grasslot
	{0x1ccd3, 0xfc},//B gain for D indoor: upper than 2*gain
	{0x1ccd4, 0x00},//R gain for D indoor: upper than 2*gain
	{0x1cccc, 0xfa},//B gain for D outdoor; D lightbox testing
	{0x1cccd, 0x06},//R gain for D outdoor; D lightbox testing

	{0x1c5b4, 0x02},//C indoor/outdoor switch lum 1 Richard@0517
	{0x1c5b5, 0xff},//C indoor/outdoor switch lum 1 Richard@0517
	{0x1c5b6, 0x04},//C indoor/outdoor switch lum 2 Richard@0517
	{0x1c5b7, 0xff},//C indoor/outdoor switch lum 2 Richard@0517

	{0x1ccd5, 0x46},//CT_A: R-gain/B-gain*0x80
	{0x1ccd6, 0x79},//CT_C: R-gain/B-gain*0x80
	{0x1ccd7, 0xc0},//CT_D: R-gain/B-gain*0x80

	{0x1c5cd, 0x01},//high light awb shift, modified by Jiangtao to avoid blurish when high CT 0310
	{0x1c5ce, 0x00},//HL_point1//calculation: expo_line*gain(1X)
	{0x1c5cf, 0xc8},//HL_point1
	{0x1c5d0, 0x01},//HL_point2
	{0x1c5d1, 0x80},//HL_point2//now is 384;lightbox testting value is 395
	{0x1c5d2, 0x03},
	{0x1c5d3, 0x00},
	{0x1c5d4, 0x50},//HL_Th_1
	{0x1c5d5, 0x94},//HL_Th_2
	{0x1c5d6, 0xb0},//HL_T_B
	{0x1c5d7, 0xe8},//HL_T_R
	{0x1c5d8, 0x40},//
	{0x1c1c2, 0x00},
	{0x1c1c3, 0x20},
#if 0
	/* new AWB shift */
	{0x1d902, 0x00},//Enable new awb shift
	{0x1d8e0, 0x00},//nAWBShiftBrThres1
	{0x1d8e1, 0xe0},
	{0x1d8e2, 0x08},//nAWBShiftBrThres2
	{0x1d8e3, 0xb0},
	{0x1d8f4, 0x30},//nAWBShiftBrThres3
	{0x1d8f5, 0x00},
	{0x1d8f6, 0xd0},//nAWBShiftBrThres4
	{0x1d8f7, 0x00}, 
	{0x1d8f2, 0x04},//nAWBShiftLowBrightThres
	{0x1d8f3, 0x22},//nAWBShiftHighBrightThres

	{0x1d8e9, 0x33},//A CT
	{0x1d8ea, 0x63},//cwf CT
	{0x1d8eb, 0x9e},//D CT

	{0x1d9c8, 0x7e},//B gain for A High light
	{0x1d9c9, 0x7c},//B gain for A
	{0x1d9ca, 0x7c},//B gain for A
	{0x1d9cb, 0x7a},//B gain for A low light 
	{0x1d9cc, 0x84},//R gain for A High light
	{0x1d9cd, 0x86},//R gain for A 
	{0x1d9ce, 0x8a},//R gain for A 
	{0x1d9cf, 0xa0},//R gain for A low light 
	{0x1d9d0, 0x7e},//B gain for cwf High light
	{0x1d9d1, 0x7c},//B gain for cwf
	{0x1d9d2, 0x7c},//B gain for cwf
	{0x1d9d3, 0x7a},//B gain for cwf low light 
	{0x1d9d4, 0x82},//R gain for cwf High light
	{0x1d9d5, 0x86},//R gain for cwf
	{0x1d9d6, 0x8a},//R gain for cwf 
	{0x1d9d7, 0xa0},//R gain for cwf low light
	{0x1d9d8, 0x84},//B gain for D High light
	{0x1d9d9, 0x82},//B gain for D
	{0x1d9da, 0x7e},//B gain for D
	{0x1d9db, 0x7a},//B gain for D low light
	{0x1d9dc, 0x80},//R gain for D High light
	{0x1d9dd, 0x82},//R gain for D
	{0x1d9de, 0x88},//R gain for D
	{0x1d9df, 0xa0},//R gain for D low light
#endif
#if 1
	//awb offset adaptive gain
	//offset in preview:
	/*low gain*/
	{0x1c1be, 0x00},//b
	{0x1c1bf, 0x00},//gb
	{0x1c1c0, 0x00},//gr
	{0x1c1c1, 0x00},//r
	/*high gain*/
	{0x1c57c, 0x00},
	{0x1c57d, 0x00},
	{0x1c57e, 0x00},
	{0x1c57f, 0x00},
	
	//offset in capture
	/*low gain*/
	{0x1c580, 0x00},
	{0x1c581, 0x00},
	{0x1c582, 0x00},
	{0x1c583, 0x00},
	/*high gain*/
	{0x1c584, 0x00},
	{0x1c585, 0x00},
	{0x1c586, 0x00},
	{0x1c587, 0x00},
	
	/*gain-threshold setting for new firmware*/
	{0x1c57a, 0x28},//0x1c59a
	{0x1c57b, 0x60},//0x1c59b
	/*awb offest enable
	*bit[0]:AWB offset;
	*bit[1]:AWB offset;
	*/
	{0x1e980, 0x00},
#endif
	/* OVISP CTAWB setting for Long Exposure (HDR/3D) */
	{0x66206, 0x14},
	{0x66207, 0x18},
	{0x66208, 0x18},
	{0x66209, 0x77},//horizontal coordinate of cwf center point
	{0x6620a, 0x6e},//vertical coordinate of cwf center point
	{0x6620b, 0xcd},//slope of A light
	{0x6620c, 0xb0},//slope of D light
	{0x6620d, 0x4c},
	{0x6620e, 0x41},
	{0x6620f, 0x6a},
	{0x66210, 0x5c},

	{0x1c1c8, 0x01},
	{0x1c1c9, 0x0d},//cwf light CCM demarcation: 0x8000/CT_C
	{0x1c1cc, 0x00},
	{0x1c1cd, 0xa9},//d65 ight CCM demarcation: 0x8000/CT_D
	{0x1c1d0, 0x01},
	{0x1c1d1, 0xcd},//a light CCM demarcation: 0x8000/CT_A
	{0x1c254, 0x00},
	{0x1c255, 0xca},
	{0x1c256, 0x00},
	{0x1c257, 0xe4},
	{0x1c258, 0x01},
	{0x1c259, 0x62},
	{0x1c25a, 0x01},
	{0x1c25b, 0xc4},

/* Color matrix */
	{0x1c1d8, 0x02},//center matrix, cwf light
	{0x1c1d9, 0x67},
	{0x1c1da, 0xFE},
	{0x1c1db, 0x99},
	{0x1c1dc, 0x00},
	{0x1c1dd, 0x00},
	{0x1c1de, 0xFF},
	{0x1c1df, 0xFF},
	{0x1c1e0, 0x01},
	{0x1c1e1, 0x5A},
	{0x1c1e2, 0xFF},
	{0x1c1e3, 0xA7},
	{0x1c1e4, 0x00},
	{0x1c1e5, 0x38},
	{0x1c1e6, 0xFE},
	{0x1c1e7, 0xB0},
	{0x1c1e8, 0x02},
	{0x1c1e9, 0x18},
	{0x1c1fc, 0xFF},//cmx left delt, D65 light
	{0x1c1fd, 0xA8},
	{0x1c1fe, 0x00},
	{0x1c1ff, 0x54},
	{0x1c200, 0x00},
	{0x1c201, 0x04},
	{0x1c202, 0xFF},
	{0x1c203, 0xA8},
	{0x1c204, 0x00},
	{0x1c205, 0x2B},
	{0x1c206, 0x00},
	{0x1c207, 0x2D},
	{0x1c208, 0xFF},
	{0x1c209, 0xDF},
	{0x1c20a, 0x00},
	{0x1c20b, 0x45},
	{0x1c20c, 0xFF},
	{0x1c20d, 0xDC},

	{0x1c220, 0x00},//cmx right delta, A light
	{0x1c221, 0xD1},
	{0x1c222, 0xFF},
	{0x1c223, 0x4F},
	{0x1c224, 0xFF},
	{0x1c225, 0xE0},
	{0x1c226, 0xFF},
	{0x1c227, 0xCC},
	{0x1c228, 0x00},
	{0x1c229, 0x57},
	{0x1c22a, 0xFF},
	{0x1c22b, 0xDD},
	{0x1c22c, 0xFF},
	{0x1c22d, 0xC7},
	{0x1c22e, 0x00},
	{0x1c22f, 0xCE},
	{0x1c230, 0xFF},
	{0x1c231, 0x6B},

	/* dpc */
	{0x65409, 0x04},
	{0x6540a, 0x02},
	{0x6540b, 0x01},
	{0x6540c, 0x01},
	{0x6540d, 0x04},
	{0x6540e, 0x02},
	{0x6540f, 0x01},
	{0x65410, 0x01},
	{0x65408, 0x0b},

	//high gain curve for dark color change 20120728
	{0x1d963, 0x1d},
	{0x1d964, 0x2f},
	{0x1d965, 0x3e},
	{0x1d966, 0x4a},
	{0x1d967, 0x54},
	{0x1d968, 0x5d},
	{0x1d969, 0x66},
	{0x1d96a, 0x70},
	{0x1d96b, 0x7a},
	{0x1d96c, 0x85},
	{0x1d96d, 0x91},
	{0x1d96e, 0xa0},
	{0x1d96f, 0xb0},
	{0x1d970, 0xc5},
	{0x1d971, 0xdf},
	{0x1d8fe, 0x01}, //UV cut gain control
	{0x1d8ff, 0x50}, //low gain thres
	{0x1d900, 0x70}, //high gain thres
	{0x1d97f, 0x14}, //UV cut low bright thres
	{0x1d973, 0x20}, //UV cut high bright thres
	{0x1d972, 0x01}, //adaptive gamma enable
	{0x1d974, 0x01}, //low gain gamma
	{0x1d975, 0xe6},
	{0x1d976, 0x01}, //high gain gamma
	{0x1d977, 0xc0},//UV cut gain control
	{0x1d978, 0x01}, //dark image gamma
	{0x1d979, 0xb3},
	{0x1d97a, 0x88}, //low gain slope
	{0x1d97b, 0x50}, //high gain slope
	{0x1d97c, 0x38}, //dark image slope
	{0x1d97d, 0x14}, //low bright thres
	{0x1d97e, 0x20}, //high bright thres

	{0x1d99e, 0x01}, //dynamic UV curve, huiyan 20120803 for dark uv noise
	//low gain UV curve 1/2
	{0x1d904, 0x73},//about 1.15 times
	{0x1d905, 0x80},
	{0x1d906, 0x8C},//about 1.25 times
	{0x1d907, 0x98},
	{0x1d908, 0x9E},
	{0x1d909, 0xA0},
	{0x1d90a, 0xA0},
	{0x1d90b, 0xA0},
	{0x1d90c, 0xA0},
	{0x1d90d, 0xA0},
	{0x1d90e, 0xA0},
	{0x1d90f, 0x9F},
	{0x1d910, 0x98},
	{0x1d911, 0x88},
	{0x1d912, 0x73},
	{0x1d913, 0x55},//about 0.65 times
	//high gain UV curve 1/2
	{0x1d914, 0x46},//about 0.6 times
	{0x1d915, 0x6A},
	{0x1d916, 0x80},
	{0x1d917, 0x8A},
	{0x1d918, 0x90},
	{0x1d919, 0x93},//about 01.25 times
	{0x1d91a, 0x93},
	{0x1d91b, 0x93},
	{0x1d91c, 0x93},
	{0x1d91d, 0x93},
	{0x1d91e, 0x93},
	{0x1d91f, 0x90},
	{0x1d920, 0x8A},
	{0x1d921, 0x80},
	{0x1d922, 0x70},
	{0x1d923, 0x55},//about 0.65 times

	//dynamic CT AWB, add for new firmware AWB
	/* super highlight mode judgement is (expo_line * gain>>8) lower than brightness threshold */
	/* highlight mode judgement is (expo_line * gain>>8) higher than brightness threshold and (expo_line * gain(1X)>>8) lower than brightness threshold0 */   
	/* middlelight mode judgement is (expo_line * gain>>8) higher than brightness threshold0 and (expo_line * gain(1X)>>8) lower than brightness threshold1 */
	/* lowlight mode judgement is (expo_line * gain>>8) higher  than brightness threshold1 */
	{0x1d924, 0x01}, //enable
	{0x1d950, 0x00}, //Br thres
	{0x1d951, 0x20}, //Br thres
	{0x1d952, 0x30}, //Br Ratio

	{0x1d8dc, 0x00}, //Br thres0
	{0x1d8dd, 0xf0}, //Br thres0
	{0x1d8da, 0x10}, //Br Ratio1

	{0x1d8de, 0x44}, //Br thres1
	{0x1d8df, 0x34}, //Br thres1
	{0x1d8db, 0x06}, //Br Ratio1

	{0x1d949, 0x11}, //super highlight cwf thres //66206
	{0x1d94a, 0x11}, //super highlight A thres //66207
	{0x1d94b, 0x14}, //super highlight D thres //66208
	{0x1d94c, 0x53}, //super highlight D limit //6620d 0x5c->0x56 need change for blue shadow
	{0x1d94d, 0x46}, //super highlight A limit //6620e
	{0x1d94e, 0x6e}, //super highlight D split //6620f
	{0x1d94f, 0x5e}, //super highlight A split //66210

	{0x1d925, 0x13}, //highlight cwf thres //66206
	{0x1d928, 0x13}, //highlight A thres //66207
	{0x1d92b, 0x13}, //highlight D thres //66208
	{0x1d92e, 0x4a}, //highlight D limit //6620d 0x56->0x50 need change for blue shadow
	{0x1d931, 0x40}, //highlight A limit //6620e
	{0x1d934, 0x6e}, //highlight D split //6620f
	{0x1d937, 0x5e}, //highlight A split //66210

	{0x1d926, 0x16}, //middlelight cwf thres
	{0x1d929, 0x20}, //middlelight A thres
	{0x1d92c, 0x18}, //middlelight D thres
	{0x1d92f, 0x4a}, //middlelight D limit
	{0x1d932, 0x3f}, //middlelight A limit
	{0x1d935, 0x6a}, //middlelight D split
	{0x1d938, 0x5e}, //middlelight A split

	{0x1d927, 0x16}, //lowlight cwf thres
	{0x1d92a, 0x20}, //lowlight A thres
	{0x1d92d, 0x20}, //lowlight D thres
	{0x1d930, 0x38}, //lowlight D limit
	{0x1d933, 0x32}, //lowlight A limit
	{0x1d936, 0x6a}, //lowlight D split
	{0x1d939, 0x5c}, //lowlight A split
};
#endif /* OV8850_H_INCLUDED */

/************************** END ***************************/
